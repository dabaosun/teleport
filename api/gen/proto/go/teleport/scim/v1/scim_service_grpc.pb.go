// Copyright 2024 Gravitational, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/scim/v1/scim_service.proto

package scimv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScimService_ListSCIMResources_FullMethodName  = "/teleport.scim.v1.ScimService/ListSCIMResources"
	ScimService_GetSCIMResource_FullMethodName    = "/teleport.scim.v1.ScimService/GetSCIMResource"
	ScimService_CreateSCIMResource_FullMethodName = "/teleport.scim.v1.ScimService/CreateSCIMResource"
	ScimService_UpdateSCIMResource_FullMethodName = "/teleport.scim.v1.ScimService/UpdateSCIMResource"
)

// ScimServiceClient is the client API for ScimService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScimServiceClient interface {
	// List fetches all (or a subset of all) resources resources of a given type
	ListSCIMResources(ctx context.Context, in *ListSCIMResourcesRequest, opts ...grpc.CallOption) (*ResourceList, error)
	// GetSCIMResource fetches a single SCIM resource from the server by name
	GetSCIMResource(ctx context.Context, in *GetSCIMResourceRequest, opts ...grpc.CallOption) (*Resource, error)
	// CreateSCIResource creates a new SCIM resource based on a supplied
	// resource description
	CreateSCIMResource(ctx context.Context, in *CreateSCIMResourceRequest, opts ...grpc.CallOption) (*Resource, error)
	// UpdateResource handles a request to update a resource, returning a
	// representation of the updated resource
	UpdateSCIMResource(ctx context.Context, in *UpdateSCIMResourceRequest, opts ...grpc.CallOption) (*Resource, error)
}

type scimServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScimServiceClient(cc grpc.ClientConnInterface) ScimServiceClient {
	return &scimServiceClient{cc}
}

func (c *scimServiceClient) ListSCIMResources(ctx context.Context, in *ListSCIMResourcesRequest, opts ...grpc.CallOption) (*ResourceList, error) {
	out := new(ResourceList)
	err := c.cc.Invoke(ctx, ScimService_ListSCIMResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scimServiceClient) GetSCIMResource(ctx context.Context, in *GetSCIMResourceRequest, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, ScimService_GetSCIMResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scimServiceClient) CreateSCIMResource(ctx context.Context, in *CreateSCIMResourceRequest, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, ScimService_CreateSCIMResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scimServiceClient) UpdateSCIMResource(ctx context.Context, in *UpdateSCIMResourceRequest, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, ScimService_UpdateSCIMResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScimServiceServer is the server API for ScimService service.
// All implementations must embed UnimplementedScimServiceServer
// for forward compatibility
type ScimServiceServer interface {
	// List fetches all (or a subset of all) resources resources of a given type
	ListSCIMResources(context.Context, *ListSCIMResourcesRequest) (*ResourceList, error)
	// GetSCIMResource fetches a single SCIM resource from the server by name
	GetSCIMResource(context.Context, *GetSCIMResourceRequest) (*Resource, error)
	// CreateSCIResource creates a new SCIM resource based on a supplied
	// resource description
	CreateSCIMResource(context.Context, *CreateSCIMResourceRequest) (*Resource, error)
	// UpdateResource handles a request to update a resource, returning a
	// representation of the updated resource
	UpdateSCIMResource(context.Context, *UpdateSCIMResourceRequest) (*Resource, error)
	mustEmbedUnimplementedScimServiceServer()
}

// UnimplementedScimServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScimServiceServer struct {
}

func (UnimplementedScimServiceServer) ListSCIMResources(context.Context, *ListSCIMResourcesRequest) (*ResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSCIMResources not implemented")
}
func (UnimplementedScimServiceServer) GetSCIMResource(context.Context, *GetSCIMResourceRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSCIMResource not implemented")
}
func (UnimplementedScimServiceServer) CreateSCIMResource(context.Context, *CreateSCIMResourceRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSCIMResource not implemented")
}
func (UnimplementedScimServiceServer) UpdateSCIMResource(context.Context, *UpdateSCIMResourceRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSCIMResource not implemented")
}
func (UnimplementedScimServiceServer) mustEmbedUnimplementedScimServiceServer() {}

// UnsafeScimServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScimServiceServer will
// result in compilation errors.
type UnsafeScimServiceServer interface {
	mustEmbedUnimplementedScimServiceServer()
}

func RegisterScimServiceServer(s grpc.ServiceRegistrar, srv ScimServiceServer) {
	s.RegisterService(&ScimService_ServiceDesc, srv)
}

func _ScimService_ListSCIMResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSCIMResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScimServiceServer).ListSCIMResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScimService_ListSCIMResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScimServiceServer).ListSCIMResources(ctx, req.(*ListSCIMResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScimService_GetSCIMResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSCIMResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScimServiceServer).GetSCIMResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScimService_GetSCIMResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScimServiceServer).GetSCIMResource(ctx, req.(*GetSCIMResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScimService_CreateSCIMResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSCIMResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScimServiceServer).CreateSCIMResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScimService_CreateSCIMResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScimServiceServer).CreateSCIMResource(ctx, req.(*CreateSCIMResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScimService_UpdateSCIMResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSCIMResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScimServiceServer).UpdateSCIMResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScimService_UpdateSCIMResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScimServiceServer).UpdateSCIMResource(ctx, req.(*UpdateSCIMResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScimService_ServiceDesc is the grpc.ServiceDesc for ScimService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScimService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.scim.v1.ScimService",
	HandlerType: (*ScimServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSCIMResources",
			Handler:    _ScimService_ListSCIMResources_Handler,
		},
		{
			MethodName: "GetSCIMResource",
			Handler:    _ScimService_GetSCIMResource_Handler,
		},
		{
			MethodName: "CreateSCIMResource",
			Handler:    _ScimService_CreateSCIMResource_Handler,
		},
		{
			MethodName: "UpdateSCIMResource",
			Handler:    _ScimService_UpdateSCIMResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/scim/v1/scim_service.proto",
}
